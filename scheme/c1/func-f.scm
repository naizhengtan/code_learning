(define (rec-f n)
 (if (< n 3) n ( + (rec-f (- n 1)) 
				   ( + (* 2 (rec-f (- n 2)))
					   (* 3 (rec-f (- n 3)))
				   )
			   )
 )
)

(define (loop-f-iter n a2 a1 a0)
 (cond ((= n 0) a0)
  	   ((= n 1) a1)
	   ((= n 2) a2)
	   (else (loop-f-iter (- n 1) (+ a2 (+ (* 2 a1) (* 3 a0)))
			                  a2 a1)
	   )
 )
)

(define (loop-f n)
 (loop-f-iter n 2 1 0)
)

(rec-f 20)
(loop-f 20)
